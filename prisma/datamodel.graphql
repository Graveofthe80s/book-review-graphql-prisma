type User {
  id: ID! @id
  name: String!
  email: String! @unique
  password: String!
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
  wantToRead: [Book!]! @relation(name: "WantedBookToUser", onDelete: SET_NULL)
  currentRead: [Book!]! @relation(name: "CurrentBookToUser", onDelete: SET_NULL)
  completeRead: [Book!]! @relation(name: "ReadBookToUser", onDelete: SET_NULL)
  reviews: [Review!]! @relation(name: "ReviewToUser", onDelete: CASCADE)
}

type Book {
  id: ID! @id
  title: String!
  sinopse: String
  published: String!
  genre: String!
  pages: Int
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
  author: Author! @relation(name: "BookToAuthor", onDelete: SET_NULL)
  wantedToRead: [User!]! @relation(name: "WantedBookToUser", onDelete: SET_NULL)
  currentRead: [User!]! @relation(name: "CurrentBookToUser", onDelete: SET_NULL)
  completedRead: [User!]! @relation(name: "ReadBookToUser", onDelete: SET_NULL)
  reviews: [Review!]! @relation(name: "ReviewToBook", onDelete: CASCADE)
}

type Author {
  id: ID! @id
  name: String!
  about: String
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
  books: [Book!]! @relation(name: "BookToAuthor", onDelete: SET_NULL)
}

type Review {
  id: ID! @id
  text: String!
  rating: Int!
  likes: Int
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
  author: User! @relation(name: "ReviewToUser", onDelete: SET_NULL)
  book: Book! @relation(name: "ReviewToBook", onDelete: SET_NULL)
}
