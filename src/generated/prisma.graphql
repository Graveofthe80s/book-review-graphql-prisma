# source: https://book-review-yfer-05143b6625.herokuapp.com/book-review-yfer/dev
# timestamp: Mon Jun 22 2020 18:07:05 GMT-0300 (Brasilia Standard Time)

type AggregateAuthor {
  count: Int!
}

type AggregateBook {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Author implements Node {
  id: ID!
  name: String!
  about: String
  updatedAt: DateTime!
  createdAt: DateTime!
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
}

"""A connection to a list of items."""
type AuthorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthorEdge]!
  aggregate: AggregateAuthor!
}

input AuthorCreateInput {
  id: ID
  name: String!
  about: String
  books: BookCreateManyWithoutAuthorInput
}

input AuthorCreateOneWithoutBooksInput {
  create: AuthorCreateWithoutBooksInput
  connect: AuthorWhereUniqueInput
}

input AuthorCreateWithoutBooksInput {
  id: ID
  name: String!
  about: String
}

"""An edge in a connection."""
type AuthorEdge {
  """The item at the end of the edge."""
  node: Author!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AuthorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  about_ASC
  about_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AuthorPreviousValues {
  id: ID!
  name: String!
  about: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type AuthorSubscriptionPayload {
  mutation: MutationType!
  node: Author
  updatedFields: [String!]
  previousValues: AuthorPreviousValues
}

input AuthorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthorSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AuthorWhereInput
}

input AuthorUpdateInput {
  name: String
  about: String
  books: BookUpdateManyWithoutAuthorInput
}

input AuthorUpdateManyMutationInput {
  name: String
  about: String
}

input AuthorUpdateOneRequiredWithoutBooksInput {
  create: AuthorCreateWithoutBooksInput
  connect: AuthorWhereUniqueInput
  update: AuthorUpdateWithoutBooksDataInput
  upsert: AuthorUpsertWithoutBooksInput
}

input AuthorUpdateWithoutBooksDataInput {
  name: String
  about: String
}

input AuthorUpsertWithoutBooksInput {
  update: AuthorUpdateWithoutBooksDataInput!
  create: AuthorCreateWithoutBooksInput!
}

input AuthorWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthorWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  about: String

  """All values that are not equal to given value."""
  about_not: String

  """All values that are contained in given list."""
  about_in: [String!]

  """All values that are not contained in given list."""
  about_not_in: [String!]

  """All values less than the given value."""
  about_lt: String

  """All values less than or equal the given value."""
  about_lte: String

  """All values greater than the given value."""
  about_gt: String

  """All values greater than or equal the given value."""
  about_gte: String

  """All values containing the given string."""
  about_contains: String

  """All values not containing the given string."""
  about_not_contains: String

  """All values starting with the given string."""
  about_starts_with: String

  """All values not starting with the given string."""
  about_not_starts_with: String

  """All values ending with the given string."""
  about_ends_with: String

  """All values not ending with the given string."""
  about_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  books_every: BookWhereInput
  books_some: BookWhereInput
  books_none: BookWhereInput
}

input AuthorWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Book implements Node {
  id: ID!
  title: String!
  sinopse: String
  published: String!
  genre: String!
  pages: Int
  updatedAt: DateTime!
  createdAt: DateTime!
  author: Author!
  wantedToRead(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  currentRead(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  completedRead(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
}

"""A connection to a list of items."""
type BookConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateInput {
  id: ID
  title: String!
  sinopse: String
  published: String!
  genre: String!
  pages: Int
  author: AuthorCreateOneWithoutBooksInput!
  wantedToRead: UserCreateManyWithoutWantToReadInput
  currentRead: UserCreateManyWithoutCurrentReadInput
  completedRead: UserCreateManyWithoutCompleteReadInput
  reviews: ReviewCreateManyWithoutBookInput
}

input BookCreateManyWithoutAuthorInput {
  create: [BookCreateWithoutAuthorInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateManyWithoutCompletedReadInput {
  create: [BookCreateWithoutCompletedReadInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateManyWithoutCurrentReadInput {
  create: [BookCreateWithoutCurrentReadInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateManyWithoutWantedToReadInput {
  create: [BookCreateWithoutWantedToReadInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateOneWithoutReviewsInput {
  create: BookCreateWithoutReviewsInput
  connect: BookWhereUniqueInput
}

input BookCreateWithoutAuthorInput {
  id: ID
  title: String!
  sinopse: String
  published: String!
  genre: String!
  pages: Int
  wantedToRead: UserCreateManyWithoutWantToReadInput
  currentRead: UserCreateManyWithoutCurrentReadInput
  completedRead: UserCreateManyWithoutCompleteReadInput
  reviews: ReviewCreateManyWithoutBookInput
}

input BookCreateWithoutCompletedReadInput {
  id: ID
  title: String!
  sinopse: String
  published: String!
  genre: String!
  pages: Int
  author: AuthorCreateOneWithoutBooksInput!
  wantedToRead: UserCreateManyWithoutWantToReadInput
  currentRead: UserCreateManyWithoutCurrentReadInput
  reviews: ReviewCreateManyWithoutBookInput
}

input BookCreateWithoutCurrentReadInput {
  id: ID
  title: String!
  sinopse: String
  published: String!
  genre: String!
  pages: Int
  author: AuthorCreateOneWithoutBooksInput!
  wantedToRead: UserCreateManyWithoutWantToReadInput
  completedRead: UserCreateManyWithoutCompleteReadInput
  reviews: ReviewCreateManyWithoutBookInput
}

input BookCreateWithoutReviewsInput {
  id: ID
  title: String!
  sinopse: String
  published: String!
  genre: String!
  pages: Int
  author: AuthorCreateOneWithoutBooksInput!
  wantedToRead: UserCreateManyWithoutWantToReadInput
  currentRead: UserCreateManyWithoutCurrentReadInput
  completedRead: UserCreateManyWithoutCompleteReadInput
}

input BookCreateWithoutWantedToReadInput {
  id: ID
  title: String!
  sinopse: String
  published: String!
  genre: String!
  pages: Int
  author: AuthorCreateOneWithoutBooksInput!
  currentRead: UserCreateManyWithoutCurrentReadInput
  completedRead: UserCreateManyWithoutCompleteReadInput
  reviews: ReviewCreateManyWithoutBookInput
}

"""An edge in a connection."""
type BookEdge {
  """The item at the end of the edge."""
  node: Book!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  sinopse_ASC
  sinopse_DESC
  published_ASC
  published_DESC
  genre_ASC
  genre_DESC
  pages_ASC
  pages_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BookPreviousValues {
  id: ID!
  title: String!
  sinopse: String
  published: String!
  genre: String!
  pages: Int
  updatedAt: DateTime!
  createdAt: DateTime!
}

input BookScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BookScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  sinopse: String

  """All values that are not equal to given value."""
  sinopse_not: String

  """All values that are contained in given list."""
  sinopse_in: [String!]

  """All values that are not contained in given list."""
  sinopse_not_in: [String!]

  """All values less than the given value."""
  sinopse_lt: String

  """All values less than or equal the given value."""
  sinopse_lte: String

  """All values greater than the given value."""
  sinopse_gt: String

  """All values greater than or equal the given value."""
  sinopse_gte: String

  """All values containing the given string."""
  sinopse_contains: String

  """All values not containing the given string."""
  sinopse_not_contains: String

  """All values starting with the given string."""
  sinopse_starts_with: String

  """All values not starting with the given string."""
  sinopse_not_starts_with: String

  """All values ending with the given string."""
  sinopse_ends_with: String

  """All values not ending with the given string."""
  sinopse_not_ends_with: String
  published: String

  """All values that are not equal to given value."""
  published_not: String

  """All values that are contained in given list."""
  published_in: [String!]

  """All values that are not contained in given list."""
  published_not_in: [String!]

  """All values less than the given value."""
  published_lt: String

  """All values less than or equal the given value."""
  published_lte: String

  """All values greater than the given value."""
  published_gt: String

  """All values greater than or equal the given value."""
  published_gte: String

  """All values containing the given string."""
  published_contains: String

  """All values not containing the given string."""
  published_not_contains: String

  """All values starting with the given string."""
  published_starts_with: String

  """All values not starting with the given string."""
  published_not_starts_with: String

  """All values ending with the given string."""
  published_ends_with: String

  """All values not ending with the given string."""
  published_not_ends_with: String
  genre: String

  """All values that are not equal to given value."""
  genre_not: String

  """All values that are contained in given list."""
  genre_in: [String!]

  """All values that are not contained in given list."""
  genre_not_in: [String!]

  """All values less than the given value."""
  genre_lt: String

  """All values less than or equal the given value."""
  genre_lte: String

  """All values greater than the given value."""
  genre_gt: String

  """All values greater than or equal the given value."""
  genre_gte: String

  """All values containing the given string."""
  genre_contains: String

  """All values not containing the given string."""
  genre_not_contains: String

  """All values starting with the given string."""
  genre_starts_with: String

  """All values not starting with the given string."""
  genre_not_starts_with: String

  """All values ending with the given string."""
  genre_ends_with: String

  """All values not ending with the given string."""
  genre_not_ends_with: String
  pages: Int

  """All values that are not equal to given value."""
  pages_not: Int

  """All values that are contained in given list."""
  pages_in: [Int!]

  """All values that are not contained in given list."""
  pages_not_in: [Int!]

  """All values less than the given value."""
  pages_lt: Int

  """All values less than or equal the given value."""
  pages_lte: Int

  """All values greater than the given value."""
  pages_gt: Int

  """All values greater than or equal the given value."""
  pages_gte: Int
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookWhereInput
}

input BookUpdateInput {
  title: String
  sinopse: String
  published: String
  genre: String
  pages: Int
  author: AuthorUpdateOneRequiredWithoutBooksInput
  wantedToRead: UserUpdateManyWithoutWantToReadInput
  currentRead: UserUpdateManyWithoutCurrentReadInput
  completedRead: UserUpdateManyWithoutCompleteReadInput
  reviews: ReviewUpdateManyWithoutBookInput
}

input BookUpdateManyDataInput {
  title: String
  sinopse: String
  published: String
  genre: String
  pages: Int
}

input BookUpdateManyMutationInput {
  title: String
  sinopse: String
  published: String
  genre: String
  pages: Int
}

input BookUpdateManyWithoutAuthorInput {
  create: [BookCreateWithoutAuthorInput!]
  connect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  delete: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  deleteMany: [BookScalarWhereInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutAuthorInput!]
}

input BookUpdateManyWithoutCompletedReadInput {
  create: [BookCreateWithoutCompletedReadInput!]
  connect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  delete: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutCompletedReadInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  deleteMany: [BookScalarWhereInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutCompletedReadInput!]
}

input BookUpdateManyWithoutCurrentReadInput {
  create: [BookCreateWithoutCurrentReadInput!]
  connect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  delete: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutCurrentReadInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  deleteMany: [BookScalarWhereInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutCurrentReadInput!]
}

input BookUpdateManyWithoutWantedToReadInput {
  create: [BookCreateWithoutWantedToReadInput!]
  connect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  delete: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutWantedToReadInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  deleteMany: [BookScalarWhereInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutWantedToReadInput!]
}

input BookUpdateManyWithWhereNestedInput {
  where: BookScalarWhereInput!
  data: BookUpdateManyDataInput!
}

input BookUpdateOneRequiredWithoutReviewsInput {
  create: BookCreateWithoutReviewsInput
  connect: BookWhereUniqueInput
  update: BookUpdateWithoutReviewsDataInput
  upsert: BookUpsertWithoutReviewsInput
}

input BookUpdateWithoutAuthorDataInput {
  title: String
  sinopse: String
  published: String
  genre: String
  pages: Int
  wantedToRead: UserUpdateManyWithoutWantToReadInput
  currentRead: UserUpdateManyWithoutCurrentReadInput
  completedRead: UserUpdateManyWithoutCompleteReadInput
  reviews: ReviewUpdateManyWithoutBookInput
}

input BookUpdateWithoutCompletedReadDataInput {
  title: String
  sinopse: String
  published: String
  genre: String
  pages: Int
  author: AuthorUpdateOneRequiredWithoutBooksInput
  wantedToRead: UserUpdateManyWithoutWantToReadInput
  currentRead: UserUpdateManyWithoutCurrentReadInput
  reviews: ReviewUpdateManyWithoutBookInput
}

input BookUpdateWithoutCurrentReadDataInput {
  title: String
  sinopse: String
  published: String
  genre: String
  pages: Int
  author: AuthorUpdateOneRequiredWithoutBooksInput
  wantedToRead: UserUpdateManyWithoutWantToReadInput
  completedRead: UserUpdateManyWithoutCompleteReadInput
  reviews: ReviewUpdateManyWithoutBookInput
}

input BookUpdateWithoutReviewsDataInput {
  title: String
  sinopse: String
  published: String
  genre: String
  pages: Int
  author: AuthorUpdateOneRequiredWithoutBooksInput
  wantedToRead: UserUpdateManyWithoutWantToReadInput
  currentRead: UserUpdateManyWithoutCurrentReadInput
  completedRead: UserUpdateManyWithoutCompleteReadInput
}

input BookUpdateWithoutWantedToReadDataInput {
  title: String
  sinopse: String
  published: String
  genre: String
  pages: Int
  author: AuthorUpdateOneRequiredWithoutBooksInput
  currentRead: UserUpdateManyWithoutCurrentReadInput
  completedRead: UserUpdateManyWithoutCompleteReadInput
  reviews: ReviewUpdateManyWithoutBookInput
}

input BookUpdateWithWhereUniqueWithoutAuthorInput {
  where: BookWhereUniqueInput!
  data: BookUpdateWithoutAuthorDataInput!
}

input BookUpdateWithWhereUniqueWithoutCompletedReadInput {
  where: BookWhereUniqueInput!
  data: BookUpdateWithoutCompletedReadDataInput!
}

input BookUpdateWithWhereUniqueWithoutCurrentReadInput {
  where: BookWhereUniqueInput!
  data: BookUpdateWithoutCurrentReadDataInput!
}

input BookUpdateWithWhereUniqueWithoutWantedToReadInput {
  where: BookWhereUniqueInput!
  data: BookUpdateWithoutWantedToReadDataInput!
}

input BookUpsertWithoutReviewsInput {
  update: BookUpdateWithoutReviewsDataInput!
  create: BookCreateWithoutReviewsInput!
}

input BookUpsertWithWhereUniqueWithoutAuthorInput {
  where: BookWhereUniqueInput!
  update: BookUpdateWithoutAuthorDataInput!
  create: BookCreateWithoutAuthorInput!
}

input BookUpsertWithWhereUniqueWithoutCompletedReadInput {
  where: BookWhereUniqueInput!
  update: BookUpdateWithoutCompletedReadDataInput!
  create: BookCreateWithoutCompletedReadInput!
}

input BookUpsertWithWhereUniqueWithoutCurrentReadInput {
  where: BookWhereUniqueInput!
  update: BookUpdateWithoutCurrentReadDataInput!
  create: BookCreateWithoutCurrentReadInput!
}

input BookUpsertWithWhereUniqueWithoutWantedToReadInput {
  where: BookWhereUniqueInput!
  update: BookUpdateWithoutWantedToReadDataInput!
  create: BookCreateWithoutWantedToReadInput!
}

input BookWhereInput {
  """Logical AND on all given filters."""
  AND: [BookWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  sinopse: String

  """All values that are not equal to given value."""
  sinopse_not: String

  """All values that are contained in given list."""
  sinopse_in: [String!]

  """All values that are not contained in given list."""
  sinopse_not_in: [String!]

  """All values less than the given value."""
  sinopse_lt: String

  """All values less than or equal the given value."""
  sinopse_lte: String

  """All values greater than the given value."""
  sinopse_gt: String

  """All values greater than or equal the given value."""
  sinopse_gte: String

  """All values containing the given string."""
  sinopse_contains: String

  """All values not containing the given string."""
  sinopse_not_contains: String

  """All values starting with the given string."""
  sinopse_starts_with: String

  """All values not starting with the given string."""
  sinopse_not_starts_with: String

  """All values ending with the given string."""
  sinopse_ends_with: String

  """All values not ending with the given string."""
  sinopse_not_ends_with: String
  published: String

  """All values that are not equal to given value."""
  published_not: String

  """All values that are contained in given list."""
  published_in: [String!]

  """All values that are not contained in given list."""
  published_not_in: [String!]

  """All values less than the given value."""
  published_lt: String

  """All values less than or equal the given value."""
  published_lte: String

  """All values greater than the given value."""
  published_gt: String

  """All values greater than or equal the given value."""
  published_gte: String

  """All values containing the given string."""
  published_contains: String

  """All values not containing the given string."""
  published_not_contains: String

  """All values starting with the given string."""
  published_starts_with: String

  """All values not starting with the given string."""
  published_not_starts_with: String

  """All values ending with the given string."""
  published_ends_with: String

  """All values not ending with the given string."""
  published_not_ends_with: String
  genre: String

  """All values that are not equal to given value."""
  genre_not: String

  """All values that are contained in given list."""
  genre_in: [String!]

  """All values that are not contained in given list."""
  genre_not_in: [String!]

  """All values less than the given value."""
  genre_lt: String

  """All values less than or equal the given value."""
  genre_lte: String

  """All values greater than the given value."""
  genre_gt: String

  """All values greater than or equal the given value."""
  genre_gte: String

  """All values containing the given string."""
  genre_contains: String

  """All values not containing the given string."""
  genre_not_contains: String

  """All values starting with the given string."""
  genre_starts_with: String

  """All values not starting with the given string."""
  genre_not_starts_with: String

  """All values ending with the given string."""
  genre_ends_with: String

  """All values not ending with the given string."""
  genre_not_ends_with: String
  pages: Int

  """All values that are not equal to given value."""
  pages_not: Int

  """All values that are contained in given list."""
  pages_in: [Int!]

  """All values that are not contained in given list."""
  pages_not_in: [Int!]

  """All values less than the given value."""
  pages_lt: Int

  """All values less than or equal the given value."""
  pages_lte: Int

  """All values greater than the given value."""
  pages_gt: Int

  """All values greater than or equal the given value."""
  pages_gte: Int
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author: AuthorWhereInput
  wantedToRead_every: UserWhereInput
  wantedToRead_some: UserWhereInput
  wantedToRead_none: UserWhereInput
  currentRead_every: UserWhereInput
  currentRead_some: UserWhereInput
  currentRead_none: UserWhereInput
  completedRead_every: UserWhereInput
  completedRead_some: UserWhereInput
  completedRead_none: UserWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
}

input BookWhereUniqueInput {
  id: ID
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createBook(data: BookCreateInput!): Book!
  createAuthor(data: AuthorCreateInput!): Author!
  createReview(data: ReviewCreateInput!): Review!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateAuthor(data: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  deleteUser(where: UserWhereUniqueInput!): User
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  deleteReview(where: ReviewWhereUniqueInput!): Review
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  upsertAuthor(where: AuthorWhereUniqueInput!, create: AuthorCreateInput!, update: AuthorUpdateInput!): Author!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyBooks(data: BookUpdateManyMutationInput!, where: BookWhereInput): BatchPayload!
  updateManyAuthors(data: AuthorUpdateManyMutationInput!, where: AuthorWhereInput): BatchPayload!
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyBooks(where: BookWhereInput): BatchPayload!
  deleteManyAuthors(where: AuthorWhereInput): BatchPayload!
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  authors(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Author]!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  user(where: UserWhereUniqueInput!): User
  book(where: BookWhereUniqueInput!): Book
  author(where: AuthorWhereUniqueInput!): Author
  review(where: ReviewWhereUniqueInput!): Review
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!
  authorsConnection(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthorConnection!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Review implements Node {
  id: ID!
  text: String!
  rating: Int!
  likes: Int
  updatedAt: DateTime!
  createdAt: DateTime!
  author: User!
  book: Book!
}

"""A connection to a list of items."""
type ReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  id: ID
  text: String!
  rating: Int!
  likes: Int
  author: UserCreateOneWithoutReviewsInput!
  book: BookCreateOneWithoutReviewsInput!
}

input ReviewCreateManyWithoutAuthorInput {
  create: [ReviewCreateWithoutAuthorInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateManyWithoutBookInput {
  create: [ReviewCreateWithoutBookInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutAuthorInput {
  id: ID
  text: String!
  rating: Int!
  likes: Int
  book: BookCreateOneWithoutReviewsInput!
}

input ReviewCreateWithoutBookInput {
  id: ID
  text: String!
  rating: Int!
  likes: Int
  author: UserCreateOneWithoutReviewsInput!
}

"""An edge in a connection."""
type ReviewEdge {
  """The item at the end of the edge."""
  node: Review!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  rating_ASC
  rating_DESC
  likes_ASC
  likes_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ReviewPreviousValues {
  id: ID!
  text: String!
  rating: Int!
  likes: Int
  updatedAt: DateTime!
  createdAt: DateTime!
}

input ReviewScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  likes: Int

  """All values that are not equal to given value."""
  likes_not: Int

  """All values that are contained in given list."""
  likes_in: [Int!]

  """All values that are not contained in given list."""
  likes_not_in: [Int!]

  """All values less than the given value."""
  likes_lt: Int

  """All values less than or equal the given value."""
  likes_lte: Int

  """All values greater than the given value."""
  likes_gt: Int

  """All values greater than or equal the given value."""
  likes_gte: Int
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
}

input ReviewUpdateInput {
  text: String
  rating: Int
  likes: Int
  author: UserUpdateOneRequiredWithoutReviewsInput
  book: BookUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateManyDataInput {
  text: String
  rating: Int
  likes: Int
}

input ReviewUpdateManyMutationInput {
  text: String
  rating: Int
  likes: Int
}

input ReviewUpdateManyWithoutAuthorInput {
  create: [ReviewCreateWithoutAuthorInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  deleteMany: [ReviewScalarWhereInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ReviewUpdateManyWithoutBookInput {
  create: [ReviewCreateWithoutBookInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  deleteMany: [ReviewScalarWhereInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutBookInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput!
  data: ReviewUpdateManyDataInput!
}

input ReviewUpdateWithoutAuthorDataInput {
  text: String
  rating: Int
  likes: Int
  book: BookUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateWithoutBookDataInput {
  text: String
  rating: Int
  likes: Int
  author: UserUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateWithWhereUniqueWithoutAuthorInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutAuthorDataInput!
}

input ReviewUpdateWithWhereUniqueWithoutBookInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutBookDataInput!
}

input ReviewUpsertWithWhereUniqueWithoutAuthorInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutAuthorDataInput!
  create: ReviewCreateWithoutAuthorInput!
}

input ReviewUpsertWithWhereUniqueWithoutBookInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutBookDataInput!
  create: ReviewCreateWithoutBookInput!
}

input ReviewWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  likes: Int

  """All values that are not equal to given value."""
  likes_not: Int

  """All values that are contained in given list."""
  likes_in: [Int!]

  """All values that are not contained in given list."""
  likes_not_in: [Int!]

  """All values less than the given value."""
  likes_lt: Int

  """All values less than or equal the given value."""
  likes_lte: Int

  """All values greater than the given value."""
  likes_gt: Int

  """All values greater than or equal the given value."""
  likes_gte: Int
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author: UserWhereInput
  book: BookWhereInput
}

input ReviewWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
  author(where: AuthorSubscriptionWhereInput): AuthorSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
  wantToRead(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
  currentRead(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
  completeRead(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  wantToRead: BookCreateManyWithoutWantedToReadInput
  currentRead: BookCreateManyWithoutCurrentReadInput
  completeRead: BookCreateManyWithoutCompletedReadInput
  reviews: ReviewCreateManyWithoutAuthorInput
}

input UserCreateManyWithoutCompleteReadInput {
  create: [UserCreateWithoutCompleteReadInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutCurrentReadInput {
  create: [UserCreateWithoutCurrentReadInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutWantToReadInput {
  create: [UserCreateWithoutWantToReadInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCompleteReadInput {
  id: ID
  name: String!
  email: String!
  password: String!
  wantToRead: BookCreateManyWithoutWantedToReadInput
  currentRead: BookCreateManyWithoutCurrentReadInput
  reviews: ReviewCreateManyWithoutAuthorInput
}

input UserCreateWithoutCurrentReadInput {
  id: ID
  name: String!
  email: String!
  password: String!
  wantToRead: BookCreateManyWithoutWantedToReadInput
  completeRead: BookCreateManyWithoutCompletedReadInput
  reviews: ReviewCreateManyWithoutAuthorInput
}

input UserCreateWithoutReviewsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  wantToRead: BookCreateManyWithoutWantedToReadInput
  currentRead: BookCreateManyWithoutCurrentReadInput
  completeRead: BookCreateManyWithoutCompletedReadInput
}

input UserCreateWithoutWantToReadInput {
  id: ID
  name: String!
  email: String!
  password: String!
  currentRead: BookCreateManyWithoutCurrentReadInput
  completeRead: BookCreateManyWithoutCompletedReadInput
  reviews: ReviewCreateManyWithoutAuthorInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  wantToRead: BookUpdateManyWithoutWantedToReadInput
  currentRead: BookUpdateManyWithoutCurrentReadInput
  completeRead: BookUpdateManyWithoutCompletedReadInput
  reviews: ReviewUpdateManyWithoutAuthorInput
}

input UserUpdateManyDataInput {
  name: String
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateManyWithoutCompleteReadInput {
  create: [UserCreateWithoutCompleteReadInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCompleteReadInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCompleteReadInput!]
}

input UserUpdateManyWithoutCurrentReadInput {
  create: [UserCreateWithoutCurrentReadInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCurrentReadInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCurrentReadInput!]
}

input UserUpdateManyWithoutWantToReadInput {
  create: [UserCreateWithoutWantToReadInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutWantToReadInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutWantToReadInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutReviewsDataInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateWithoutCompleteReadDataInput {
  name: String
  email: String
  password: String
  wantToRead: BookUpdateManyWithoutWantedToReadInput
  currentRead: BookUpdateManyWithoutCurrentReadInput
  reviews: ReviewUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutCurrentReadDataInput {
  name: String
  email: String
  password: String
  wantToRead: BookUpdateManyWithoutWantedToReadInput
  completeRead: BookUpdateManyWithoutCompletedReadInput
  reviews: ReviewUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutReviewsDataInput {
  name: String
  email: String
  password: String
  wantToRead: BookUpdateManyWithoutWantedToReadInput
  currentRead: BookUpdateManyWithoutCurrentReadInput
  completeRead: BookUpdateManyWithoutCompletedReadInput
}

input UserUpdateWithoutWantToReadDataInput {
  name: String
  email: String
  password: String
  currentRead: BookUpdateManyWithoutCurrentReadInput
  completeRead: BookUpdateManyWithoutCompletedReadInput
  reviews: ReviewUpdateManyWithoutAuthorInput
}

input UserUpdateWithWhereUniqueWithoutCompleteReadInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCompleteReadDataInput!
}

input UserUpdateWithWhereUniqueWithoutCurrentReadInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCurrentReadDataInput!
}

input UserUpdateWithWhereUniqueWithoutWantToReadInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutWantToReadDataInput!
}

input UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput!
  create: UserCreateWithoutReviewsInput!
}

input UserUpsertWithWhereUniqueWithoutCompleteReadInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCompleteReadDataInput!
  create: UserCreateWithoutCompleteReadInput!
}

input UserUpsertWithWhereUniqueWithoutCurrentReadInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCurrentReadDataInput!
  create: UserCreateWithoutCurrentReadInput!
}

input UserUpsertWithWhereUniqueWithoutWantToReadInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutWantToReadDataInput!
  create: UserCreateWithoutWantToReadInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  wantToRead_every: BookWhereInput
  wantToRead_some: BookWhereInput
  wantToRead_none: BookWhereInput
  currentRead_every: BookWhereInput
  currentRead_some: BookWhereInput
  currentRead_none: BookWhereInput
  completeRead_every: BookWhereInput
  completeRead_some: BookWhereInput
  completeRead_none: BookWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
