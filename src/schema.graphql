type Query {
  user(query: String): User!
  users(query: String): [User!]!
  books: [Book!]!
  authors: [Author!]!
  reviews: [Review!]!
  groups: [Group!]!
  hello: String!
}

type Mutation {
  login(data: LoginUserInput): AuthPayload!
  createUser(data: CreateUserInput): AuthPayload!
  updateUser(data: UpdateUserInput): User!
  deleteUser(userId: ID!): User!
  createAuthor(data: CreateAuthorInput): Author!
  updateAuthor(id: ID!, data: UpdateAuthorInput): Author!
  deleteAuthor(authorId: ID!): Author!
  createBook(data: CreateBookInput): Book!
  updateBook(data: UpdateBookInput): Book!
  deleteBook(bookId: ID!): Book!
  createReview(data: CreateReviewInput): Review!
  updateReview(data: UpdateReviewInput): Review!
  deleteReview(reviewId: ID!): Review!
  createGroup(data: CreateGroupInput): Group!
  updateGroup(data: UpdateGroupInput): Group!
  deleteGroup(groupId: ID!): Group!

  shelfList(id: ID!, chose: String!): User!
}

input LoginUserInput {
  email: String!
  password: String!
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  imageFile: String
}
input UpdateUserInput {
  name: String
  email: String
  password: String
  imageFile: String
}

input CreateAuthorInput {
  name: String!
  about: String
  imageFile: String
}
input UpdateAuthorInput {
  name: String
  about: String
  imageFile: String
}

input CreateBookInput {
  title: String!
  sinopse: String
  published: String!
  genre: String!
  pages: Int
  author: ID!
  imageFile: [String]
}
input UpdateBookInput {
  title: String
  sinopse: String
  published: String
  genre: String
  pages: Int
  imageFile: [String]
}

input CreateReviewInput {
  text: String!
  rating: Int!
  likes: Int
}
input UpdateReviewInput {
  text: String
  rating: Int
  likes: Int
}

input CreateGroupInput {
  name: String!
  description: String
  imageFile: [String]
}
input UpdateGroupInput {
  name: String!
  description: String
  imageFile: [String]
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  imageFile: String
  wantToRead: [Book!]!
  currentRead: [Book!]!
  completeRead: [Book!]!
  reviews: [Review!]!
  groups: [Group!]!
  updatedAt: String!
  createdAt: String!
}

type Book {
  id: ID!
  title: String!
  sinopse: String
  published: String!
  genre: String!
  pages: Int
  author: Author!
  wantedToRead: [User!]!
  currentRead: [User!]!
  completedRead: [User!]!
  updatedAt: String!
  createdAt: String!
}

type Author {
  id: ID!
  name: String!
  about: String
  books: [Book!]!
  updatedAt: String!
  createdAt: String!
}

type Review {
  id: ID!
  text: String!
  rating: Float!
  likes: Int
  author: User!
  book: Book!
  updatedAt: String!
  createdAt: String!
}

type Group {
  id: ID!
  name: String!
  description: String
  imageFile: String
  admin: User!
  members: User!
  currentRead: Book!
  completedRead: [Book!]!
  nextRead: [Book!]!
}
